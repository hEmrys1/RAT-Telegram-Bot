# coding=<utf-8>
import config
import telebot
from telebot import types
import requests
import os
import time
import pyautogui as pag
import platform as pf
import clr

my_id = config.user_id
bot = telebot.TeleBot(config.TOKEN)

openhardwaremonitor_hwtypes = ['Mainboard', 'SuperIO', 'CPU', 'RAM', 'GpuNvidia', 'GpuAti', 'TBalancer', 'Heatmaster',
                               'HDD']
openhardwaremonitor_sensortypes = ['Voltage', 'Clock', 'Temperature', 'Load', 'Fan', 'Flow', 'Control', 'Level',
                                   'Factor', 'Power', 'Data', 'SmallData']

commands_msg = '''
–í–æ—Ç –º–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

‚ö†Ô∏è*–ü–∏—Ç–∞–Ω–∏–µ*
/shut - –º–µ–Ω—é –≤—ã–∫–ª—é—á–µ–Ω–∏—è
/restart - –º–µ–Ω—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏

üå°*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤*
/temperature - –º–µ–Ω—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä

üìå*–î—Ä—É–≥–æ–µ*
/spec - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/screenshot - —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ (low quality)

üõ†*–ù–∞—Å—Ç—Ä–æ–π–∫–∞*
/help - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
'''

help_msg = '''
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞.

1. –ü–µ—Ä–µ–π–¥–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –≤ –ø–æ–∏—Å–∫–µ –Ω–∞–π–¥–µ–º @BotFather. –ö–æ–º–∞–Ω–¥–æ–π /newbot —Å–æ–∑–¥–∞–¥–∏–º –±–æ—Ç–∞, —É–∫–∞–∑–∞–≤ —Å–Ω–∞—á–∞–ª–∞ –∏–º—è –±–æ—Ç–∞, –∑–∞—Ç–µ–º –µ–≥–æ –ª–æ–≥–∏–Ω.
2. BotFather –≤—ã–¥–∞—Å—Ç API –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ü—Ä–∏–º–µ—Ä: 1769225647:ABHQQeGpHrg5ehKg12dUi7Ieg-8U93GqAUp), –µ–≥–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
3. –í –ø–æ–∏—Å–∫–µ –Ω–∞–π–¥–µ–º –µ—â–µ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ @ShowJsonBot. –ù–∞–ø–∏—à–µ–º –µ–º—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞–º –¥–∞–Ω–Ω—ã–µ. –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è id (message : from : id).
4. –í —Ñ–∞–π–ª config.py –ø–æ–º–µ—Å—Ç–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (API –±–æ—Ç–∞ –∏ –≤–∞—à id) –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
5. –° —Å–∞–π—Ç–∞ OpenHardwareMonitor —Å–∫–∞—á–∏–≤–∞–µ–º —É—Ç–∏–ª–∏—Ç—É [–¢–´–ö](https://openhardwaremonitor.org/downloads/). –ò–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–º –Ω—É–∂–µ–Ω *–¢–û–õ–¨–ö–û* OpenHardwareMonitorLib.dll. –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –µ–≥–æ –≤ –ø–∞–ø–∫—É —Å –±–æ—Ç–æ–º.
6. –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º .exe —Ñ–∞–π–ª –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è Python [–¢–´–ö](https://www.python.org/downloads/). –°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º. –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É *add python to path*.
7. –û—Ç–∫—Ä—ã–≤–∞–µ–º cmd, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –±–æ—Ç–æ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º _pyinstaller -w -F bot.py_. –î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è .exe —Ñ–∞–π–ª –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –ø–∞–ø–∫–µ dist.
8. –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –µ–≥–æ –∏–∑ dist –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É —Å –±–æ—Ç–æ–º. –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º —è—Ä–ª—ã–∫ .exe —Ñ–∞–π–ª–∞ –∏ –ø–æ–º–µ—â–∞–µ–º –≤ –ø–∞–ø–∫—É –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ (C:\\Users\\–ò–º—è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup).
'''

# MARKUPS
back_btn = types.KeyboardButton("‚è™–ù–∞–∑–∞–¥")

# main menu
rmk_menu = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
menu_cmds = types.KeyboardButton("‚öôÔ∏è–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
menu_help = types.KeyboardButton("üÜò–ü–æ–º–æ—â—å")
menu_power = types.KeyboardButton("‚ö†Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º")
menu_temperature = types.KeyboardButton("üå°–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤")
menu_addl = types.KeyboardButton("üìå–î—Ä—É–≥–æ–µ")
rmk_menu.row(menu_cmds, menu_help)
rmk_menu.row(menu_power, menu_temperature)
rmk_menu.row(menu_addl)

# additional menu
rmk_addl = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
info_btn = types.KeyboardButton("üîé–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
screen_btn = types.KeyboardButton("üì∑–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
rmk_addl.row(info_btn, screen_btn)
rmk_addl.row(back_btn)

# power
rkm_power = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
custom_btn = types.KeyboardButton("üïπ–°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞")
shut_btn = types.KeyboardButton("üî¥–í—ã–∫–ª—é—á–µ–Ω–∏–µ")
rs_btn = types.KeyboardButton("‚ôªÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")
rkm_power.row(custom_btn)
rkm_power.row(shut_btn, rs_btn)
rkm_power.row(back_btn)

# shut
rmk_shut = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
shut_now = types.KeyboardButton("shut now")
shut_cancel = types.KeyboardButton("shut cancel")
shut_5 = types.KeyboardButton("shut5")
shut_10 = types.KeyboardButton("shut10")
rmk_shut.row(shut_now, shut_cancel)
rmk_shut.row(shut_5, shut_10)
rmk_shut.row(back_btn)

# restart
rmk_restart = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
rs_now = types.KeyboardButton("restart now")
rs_cancel = types.KeyboardButton("restart cancel")
rs_5 = types.KeyboardButton("restart5")
rs_10 = types.KeyboardButton("restart10")
rmk_restart.row(rs_now, rs_cancel)
rmk_restart.row(rs_5, rs_10)
rmk_restart.row(back_btn)

# temperatures
rmk_temp = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
temp_all = types.KeyboardButton("üîë–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")
temp_gpu = types.KeyboardButton("üå°–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞")
temp_cpu = types.KeyboardButton("üå°–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä")
rmk_temp.row(temp_all)
rmk_temp.row(temp_gpu, temp_cpu)
rmk_temp.row(back_btn)

# –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞, –æ–Ω –Ω–∞–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "Online, –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞"
seconds = time.time()
time_now = time.ctime(seconds)
online_post_message = f"Online\n{time_now}"
bot.send_message(my_id, online_post_message, reply_markup=rmk_menu)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands=['start'])
def start(message):
    hello_msg = "üëã –Ø –ø–æ–º–æ–≥—É –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–≤–æ–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã."
    bot.send_message(message.chat.id, hello_msg, reply_markup=rmk_menu)


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, help_msg, parse_mode="markdown")


@bot.message_handler(commands=['spec'])
def spec(message):
    pc_name = pf.node()
    req = requests.get('https://ip.42.pl/raw')
    ip = req.text
    uname = os.getlogin()
    bot.send_message(message.chat.id, f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {uname}\n*PC Name:* {pc_name}\n*IP:* {ip}\n",
                     parse_mode="markdown")


@bot.message_handler(commands=['screenshot'])
def screenshot(message):
    pag.screenshot("000.jpg")
    with open("000.jpg", "rb") as img:
        bot.send_photo(message.chat.id, img)


@bot.message_handler(commands=['shut'])
def shut_main(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=rmk_shut)
    bot.register_next_step_handler(message, shut_action)


@bot.message_handler(commands=['restart'])
def restart_main(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=rmk_restart)
    bot.register_next_step_handler(message, restart_action)


@bot.message_handler(commands=['temperature'])
def restart_main(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=rmk_temp)
    bot.register_next_step_handler(message, temperature_action)


@bot.message_handler(content_types=['text'])
def text_handler(message):
    if message.from_user.id == my_id:
        if message.text == "‚öôÔ∏è–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥":
            bot.send_message(message.chat.id, commands_msg, parse_mode="markdown")

        elif message.text == "üÜò–ü–æ–º–æ—â—å":
            bot.send_message(message.chat.id, help_msg, parse_mode="markdown")

        elif message.text == "‚ö†Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º":
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=rkm_power)
            bot.register_next_step_handler(message, power_action)

        elif message.text == "üå°–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤":
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=rmk_temp)
            bot.register_next_step_handler(message, temperature_action)

        elif message.text == "üìå–î—Ä—É–≥–æ–µ":
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=rmk_addl)
            bot.register_next_step_handler(message, addl_action)


def power_action(message):
    if message.from_user.id == my_id:
        if message.text == "üî¥–í—ã–∫–ª—é—á–µ–Ω–∏–µ":
            bot.send_message(message.chat.id, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ", reply_markup=rmk_shut)
            bot.register_next_step_handler(message, shut_action)

        elif message.text == "‚ôªÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞":
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", reply_markup=rmk_restart)
            bot.register_next_step_handler(message, restart_action)

        elif message.text == "üïπ–°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...")
            bot.register_next_step_handler(message, custom_action)

        elif message.text == "‚è™–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=rmk_menu)
            bot.register_next_step_handler(message, text_handler)

        else:
            bot.send_message(message.chat.id,
                             "‚ùóÔ∏è–ù–µ —è–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–º–∞–Ω–¥–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            bot.register_next_step_handler(message, power_action)
    else:
        error_rights(message)


def shut_action(message):
    if message.from_user.id == my_id:
        if message.text == "shut cancel":
            bot.send_message(message.chat.id, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            os.system('shutdown -a')
            bot.register_next_step_handler(message, shut_action)

        elif message.text == "shut now":
            bot.send_message(message.chat.id, "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã–∫–ª—é—á–µ–Ω–∏–µ.")
            os.system('shutdown -s -t 0 -f')         
            bot.register_next_step_handler(message, shut_action)

        elif message.text == "shut5":
            bot.send_message(message.chat.id, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
            os.system('shutdown -s -t 300')
            bot.register_next_step_handler(message, shut_action)

        elif message.text == "shut10":
            bot.send_message(message.chat.id, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.")
            os.system('shutdown -s -t 600')
            bot.register_next_step_handler(message, shut_action)

        elif message.text == "‚è™–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=rmk_menu)
            bot.register_next_step_handler(message, text_handler)

        else:
            bot.send_message(message.chat.id,
                             "‚ùóÔ∏è–ù–µ —è–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–º–∞–Ω–¥–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            bot.register_next_step_handler(message, shut_action)
    else:
        error_rights(message)


def restart_action(message):
    if message.from_user.id == my_id:
        if message.text == "restart cancel":
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            os.system('shutdown -a')
            bot.register_next_step_handler(message, restart_action)

        elif message.text == "restart now":
            bot.send_message(message.chat.id, "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞.")
            os.system('shutdown -r -t 0 -f')
            bot.register_next_step_handler(message, restart_action)

        elif message.text == "restart5":
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
            os.system('shutdown -r -t 300')
            bot.register_next_step_handler(message, restart_action)

        elif message.text == "restart10":
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.")
            os.system('shutdown -r -t 600')
            bot.register_next_step_handler(message, restart_action)

        elif message.text == "‚è™–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=rmk_menu)
            bot.register_next_step_handler(message, text_handler)

        else:
            bot.send_message(message.chat.id,
                             "‚ùóÔ∏è–ù–µ —è–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–º–∞–Ω–¥–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            bot.register_next_step_handler(message, restart_action)
    else:
        error_rights(message)


def custom_action(message):
    if message.from_user.id == my_id:
        try:
            os.system(message.text)
            bot.send_message(message.chat.id, "–£—Å–ø–µ—Ö!")
            bot.register_next_step_handler(message, power_action)
        except:
            bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    else:
        error_rights(message)


def temperature_action(message):
    if message.from_user.id == my_id:
        if message.text == "üîë–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            fetch_stats(HardwareHandle)
            for msg in output_list:
                bot.send_message(message.chat.id, msg)
            output_list.clear()
            bot.register_next_step_handler(message, temperature_action)

        elif message.text == "üå°–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            fetch_stats_gpu(HardwareHandle)
            for msg in output_list_gpu:
                bot.send_message(message.chat.id, msg)
            output_list_gpu.clear()
            bot.register_next_step_handler(message, temperature_action)

        elif message.text == "üå°–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            fetch_stats_cpu(HardwareHandle)
            for msg in output_list_cpu:
                bot.send_message(message.chat.id, msg)
            output_list_cpu.clear()
            bot.register_next_step_handler(message, temperature_action)

        elif message.text == "‚è™–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=rmk_menu)
            bot.register_next_step_handler(message, text_handler)

        else:
            bot.send_message(message.chat.id,
                             "‚ùóÔ∏è–ù–µ —è–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–º–∞–Ω–¥–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            bot.register_next_step_handler(message, temperature_action)
    else:
        error_rights(message)


def addl_action(message):
    if message.from_user.id == my_id:
        if message.text == "üîé–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            pc_name = pf.node()
            req = requests.get('https://ip.42.pl/raw')
            ip = req.text
            uname = os.getlogin()
            bot.send_message(message.chat.id, f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {uname}\n*PC Name:* {pc_name}\n*IP:* {ip}\n",
                             parse_mode="markdown")
            bot.register_next_step_handler(message, addl_action)

        elif message.text == "üì∑–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç":
            pag.screenshot("000.jpg")

            with open("000.jpg", "rb") as img:
                bot.send_photo(message.chat.id, img)

            bot.register_next_step_handler(message, addl_action)

        elif message.text == "‚è™–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=rmk_menu)
            bot.register_next_step_handler(message, text_handler)

        else:
            bot.send_message(message.chat.id,
                             "‚ùóÔ∏è–ù–µ —è–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–º–∞–Ω–¥–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            bot.register_next_step_handler(message, temperature_action)
    else:
        error_rights(message)


output_list = []
output_list_cpu = []
output_list_gpu = []


def initialize_openhardwaremonitor():
    file = 'OpenHardwareMonitorLib'
    clr.AddReference(file)

    from OpenHardwareMonitor import Hardware

    handle = Hardware.Computer()
    handle.MainboardEnabled = True
    handle.CPUEnabled = True
    handle.RAMEnabled = True
    handle.GPUEnabled = True
    handle.HDDEnabled = True
    handle.Open()
    return handle


def fetch_stats(handle):
    for i in handle.Hardware:
        i.Update()
        for sensor in i.Sensors:
            parse_sensor(sensor)
        for j in i.SubHardware:
            j.Update()
            for subsensor in j.Sensors:
                parse_sensor(subsensor)


def fetch_stats_cpu(handle):
    for i in handle.Hardware:
        i.Update()
        for sensor in i.Sensors:
            parse_sensor_cpu(sensor)
        for j in i.SubHardware:
            j.Update()
            for subsensor in j.Sensors:
                parse_sensor_cpu(subsensor)


def fetch_stats_gpu(handle):
    for i in handle.Hardware:
        i.Update()
        for sensor in i.Sensors:
            parse_sensor_gpu(sensor)
        for j in i.SubHardware:
            j.Update()
            for subsensor in j.Sensors:
                parse_sensor_gpu(subsensor)


def parse_sensor(sensor):
    if sensor.Value is not None:
        if type(sensor).__module__ == 'OpenHardwareMonitor.Hardware':
            sensortypes = openhardwaremonitor_sensortypes
            hardwaretypes = openhardwaremonitor_hwtypes
        else:
            return

        if sensor.SensorType == sensortypes.index('Temperature'):
            output_str = u"%s %s Temperature Sensor #%i %s - %s\u00B0C" % (
            hardwaretypes[sensor.Hardware.HardwareType], sensor.Hardware.Name, sensor.Index, sensor.Name, sensor.Value)
            output_list.append(output_str)


def parse_sensor_cpu(sensor):
    if sensor.Value is not None:
        if type(sensor).__module__ == 'OpenHardwareMonitor.Hardware':
            sensortypes = openhardwaremonitor_sensortypes
            hardwaretypes = openhardwaremonitor_hwtypes
        else:
            return

        if sensor.SensorType == sensortypes.index('Temperature') and sensor.Name[:8] == "CPU Core":
            output_str = u"%s %s Temperature Sensor #%i %s - %s\u00B0C" % (
            hardwaretypes[sensor.Hardware.HardwareType], sensor.Hardware.Name, sensor.Index, sensor.Name, sensor.Value)
            output_list_cpu.append(output_str)


def parse_sensor_gpu(sensor):
    if sensor.Value is not None:
        if type(sensor).__module__ == 'OpenHardwareMonitor.Hardware':
            sensortypes = openhardwaremonitor_sensortypes
            hardwaretypes = openhardwaremonitor_hwtypes
        else:
            return

        if sensor.SensorType == sensortypes.index('Temperature') and sensor.Name[:8] == "GPU Core":
            output_str = u"%s %s Temperature Sensor #%i %s - %s\u00B0C" % (
            hardwaretypes[sensor.Hardware.HardwareType], sensor.Hardware.Name, sensor.Index, sensor.Name, sensor.Value)
            output_list_gpu.append(output_str)


def error_rights(message):
    bot.send_message(message.chat.id, "–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: " + message)


if __name__ == "__main__":
    HardwareHandle = initialize_openhardwaremonitor()
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception:
        pass
